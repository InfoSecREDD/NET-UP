exitnetup () {
        if [ -z $NETUP_CONSOLE ]; then
                echo -e ""
                check_good "$NETUPCRED1"
                echo -e ""
                exit 0
        fi
}

do_run() {
	SELECTED=$1
        if [ -z "$1" ]; then
                echo -e "No Module input given."
		exit_check # Check for console before exit
        else
                FILE=$1
                runmodcommand
                exitnetup
        fi
}

do_update() {
	if [ "$1" = "-y" ] || [ "$1" = "-f" ]; then
		fastupdategithub
	elif [ "$1" = "--netup-only" ] || [ "$1" = "-n" ]; then
		if [ "$2" = "-y" ]; then
			fastupdatenetuponly
		fi
		checkvers
		updatenetuponly
	else
		checkvers
		exitnetup
	fi
}

do_autoexit() {
        if [ "$1" = "off" ] ||  [ "$1" = "OFF" ] || [ "$1" = "" ]; then
                if grep -q "$AUTOEXITOFF" "$HOMEDIR/netup"
                        then
			echo -e ""
                        print_notification "Automatic Exit is already disabled."
                else
			echo -e ""
			sed -i "s/$AUTOEXITON/$AUTOEXITOFF/g" "$HOMEDIR/netup"
                        check_good "Changed Automatic Exit of Script to OFF."
                fi
                elif [ "$1" = "on" ] ||  [ "$1" = "ON" ]; then
                        if grep -q "$AUTOEXITON" "$HOMEDIR/netup"
                        then
			echo -e "";
                        print_notification "Automatic Exit is already enabled."
                else
			echo -e ""
			sed -i "s/$AUTOEXITOFF/$AUTOEXITON/g" "$HOMEDIR/netup"
                        check_good "Changed Automatic Exit of Script to ON."
                fi
                else
        exit_check # Check for console before exit
        fi
        exitnetup
}

do_autoreboot() {
        if [ "$1" = "off" ] ||  [ "$1" = "OFF" ] || [ "$1" = "" ]; then
		if grep -q "$AUTOBOOTOFF" "$HOMEDIR/netup"
			then
			echo -e ""
    			print_notification "Automatic Reboot is already disabled."
		else
			echo -e ""
			sed -i "s/$AUTOBOOTON/$AUTOBOOTOFF/g" "$HOMEDIR/netup"
			check_good "Changed Automatic Reboot after Script Completes to OFF."
		fi
                elif [ "$1" = "on" ] ||  [ "$1" = "ON" ]; then
			if grep -q "$AUTOBOOTON" "$HOMEDIR/netup"
                        then
			echo -e ""
			print_notification "Automatic Reboot is already enabled."
		else
			echo -e ""
			sed -i "s/$AUTOBOOTOFF/$AUTOBOOTON/g" "$HOMEDIR/netup"
			check_good "Changed Automatic Reboot after Script Completes to ON."
		fi
                else
        exit_check # Check for console before exit
        fi
        exitnetup
}

do_updatemods() {
	updatemods
	exitnetup
}

do_autostart() {
        if [ "$1" = "off" ] ||  [ "$1" = "OFF" ] || [ "$1" = "" ]; then
		disable_cron
	elif [ "$1" = "on" ] ||  [ "$1" = "ON" ]; then
		install_cron;
	else
		really;
        	exit_check # Check for console before exit
	fi
        exitnetup
}

do_interface() {
	if [ "$1" = "auto" ] || [ "$1" = "" ]; then
		AUTO1=$(ip link | grep "state UP" | awk -F: '$0!~"lo|vir|^[^0-9]"{print $2;getline}')
		AUTODETECT=${AUTO1## }
		echo -e "";
		print_notification "Automatticially detecting active Adapter.";
		print_notification "Setting $INTVAR Variable to $AUTODETECT";
		sed -i "s/$INTVAR=.*/$INTVAR=$AUTODETECT/g" "$HOMEDIR/netup";
		check_good "Done."
		exitnetup;
	fi
}

do_information() {
		RED="\033[0;31m"
		GREEN="\033[1;32m"
		YELLOW="\033[1;33m"
		BLUE="\033[1;34m"
		PURPLE="\033[1;35m"
		BWHITE="\033[1;37m"
		DCOLOR="\033[0m"
		UNDL="\033[4m"
		clear
		DATE_TIME_RAW=`date +%Y" "%m" "%d" "%H" "%M" "%S" "%b" "%Z" "%A" "%s`
		TIME_NOW=`echo "${DATE_TIME_RAW}"|awk '{print $4":"$5":"$6}'`
		TIME_NOW_TZ=`echo "${DATE_TIME_RAW}"|awk '{print $8}'`
		DATE_NOW=`echo "${DATE_TIME_RAW}"|awk '{print $1"-"$7"-"$3}'`
		DATE_NOW_DAY=`echo "${DATE_TIME_RAW}"|awk '{print $9}'`
                IFS=" "
                DATE_TIME_LIST=( $DATE_TIME_RAW )
                UP_SINCE_RAW=`uptime -s`
                UP_SINCE=`echo "${UP_SINCE_RAW}"|sed 's/[-]/ /g'`
                UP_TIME_RAW=`date -d "${UP_SINCE_RAW}" +"%s"`
                UP_TIME_STAMP=`echo "$((${DATE_TIME_LIST[9]} - ${UP_TIME_RAW}))"`
                UP_TIME_DAYS=`echo "$(((((${DATE_TIME_LIST[9]} - ${UP_TIME_RAW}) / 24) / 60) / 60))"`
                UP_TIME=`date -u -d @${UP_TIME_STAMP} +"%H %M %S"`
                UP_TIME_LIST=( $UP_TIME )
		printf "$BLUE|##################|[ $DCOLOR$YELLOW$UNDL%s$DCOLOR $UNDL$YELLOW%s$DCOLOR $UNDL$YELLOW%s$DCOLOR$BLUE ]|#####################| $DCOLOR\n" "System" "Reporting" "Script"
		printf "$BLUE|====================================================================| $DCOLOR\n"
		printf "$BLUE|#########[$DCOLOR $UNDL$YELLOW%s$DCOLOR $UNDL$YELLOW%s$DCOLOR $UNDL$YELLOW%s$DCOLOR$BLUE ]#######|#######[$DCOLOR $UNDL$YELLOW%s$DCOLOR $UNDL$YELLOW%s$DCOLOR $BLUE]#########| $DCOLOR\n" "Date" "and" "Time" "Current" "Uptime"
		printf "$BWHITE"
		printf "  %-5s$DCOLOR$BWHITE  %-9s %-16s %-20s$DCOLOR$BWHITE\n" "Time:" $TIME_NOW $TIME_NOW_TZ "Uptime Since Last Restart:"
		printf "  %-5s$DCOLOR$BWHITE  %-9s %-22s %-3s d, %s:%s:%s\n" "Date:" $DATE_NOW $DATE_NOW_DAY $UP_TIME_DAYS ${UP_TIME_LIST[0]} ${UP_TIME_LIST[1]} ${UP_TIME_LIST[2]}
		printf " %-36s %-10s$DCOLOR$BWHITE %-10s\n" "" "Total Seconds :" $UP_TIME_STAMP
		printf "$DCOLOR"
#		printf "\n"
		printf "$BLUE|######[$DCOLOR $UNDL$YELLOW%s$DCOLOR $UNDL$YELLOW%s$DCOLOR $BLUE]#####||########[$DCOLOR $UNDL$YELLOW%s$DCOLOR $UNDL$YELLOW%s$DCOLOR$BLUE ]##########| $DCOLOR\n" "System" "Information" "Memory" "Info"
		SYSINFO_OS=`uname -s`
		SYSINFO_ARCH=`uname -m`
		SYSINFO_REL=`uname -r`
		SYSINFO_OS2=`lsb_release -si`
		SYSINFO_OS3=`lsb_release -sr`
		SYSINFO_HOST=`echo $HOSTNAME`
                MEM_RAW=`free -m`
                MEM_TOTAL=`echo "${MEM_RAW}"|awk 'NR==2{print $2}'`
                MEM_USED=`echo "${MEM_RAW}"|awk 'NR==2{print $3}'`
                MEM_FREE=`echo "${MEM_RAW}"|awk 'NR==2{print $7}'`
                MEM_FREE_PERC=`echo "${MEM_RAW}"|awk 'NR==2{print ($7*100/$2)}'`
		printf "$BWHITE"
		printf "  %-10s$DCOLOR$BWHITE %-10s %-15s %-11s$DCOLOR$BWHITE " "OS Name  :" $SYSINFO_OS2 $SYSINFO_OS3 "MEM Status  :"
		if [ `echo "${MEM_FREE_PERC} < 20.0"|bc` -eq 1 ]; then
                        printf "${RED}!!MEMORY CRITICAL!!$BWHITE\n"
                elif [ `echo "${MEM_FREE_PERC} < 25.0"|bc` -eq 1 ]; then
                        printf "${RED}!MEMORY LOW!$BWHITE\n"
                elif [ `echo "${MEM_FREE_PERC} < 30.0"|bc` -eq 1 ]; then
                        printf "${YELLOW}MEMORY LIMITED$BWHITE\n"
                elif [ `echo "${MEM_FREE_PERC} < 40.0"|bc` -eq 1 ]; then
                        printf "${YELLOW}MEMORY OK$BWHITE\n"
                else
                        printf "${GREEN}MEMORY GOOD$BWHITE\n"
                fi
		printf "  %-9s$DCOLOR$BWHITE %-10s %-17s" "Core OS  :" $SYSINFO_OS
                if [ `echo "${MEM_FREE_PERC} < 20.0"|bc` -eq 1 ]; then
                        printf "${RED}%sMB${BWHITE}/%sMB ${RED}(%.2f%%)$BWHITE\n" $MEM_FREE $MEM_TOTAL $MEM_FREE_PERC
                elif [ `echo "${MEM_FREE_PERC} < 25.0"|bc` -eq 1 ]; then
                        printf "${RED}%sMB${BWHITE}/%sMB ${RED}(%.2f%%)$BWHITE\n" $MEM_FREE $MEM_TOTAL $MEM_FREE_PERC
                elif [ `echo "${MEM_FREE_PERC} < 30.0"|bc` -eq 1 ]; then
                        printf "${YELLOW}%sMB${BWHITE}/%sMB ${YELLOW}(%.2f%%)$BWHITE\n" $MEM_FREE $MEM_TOTAL $MEM_FREE_PERC
                elif [ `echo "${MEM_FREE_PERC} < 40.0"|bc` -eq 1 ]; then
                        printf "${YELLOW}%sMB$B{WHITE}/%sMB ${YELLOW}(%.2f%%)$BWHITE\n" $MEM_FREE $MEM_TOTAL $MEM_FREE_PERC
                else
                        printf "${GREEN}%sMB${BWHITE}/%sMB ${GREEN}(%.2f%%)${BWHITE} \n" $MEM_FREE $MEM_TOTAL $MEM_FREE_PERC
                fi
		CURR_PROC=`ps ax|wc -l`
		printf "  %-10s$DCOLOR$BWHITE %-16s     $BLUE%s$YELLOW $UNDL%s$DCOLOR $BLUE%s $DCOLOR\n" "Kernel   :" $SYSINFO_REL "|#########[" "Processes" "]###########|"
		printf "$BWHITE"
		printf "  %-10s$DCOLOR$BWHITE %-23s  %-15s$DCOLOR$BWHITE %s\n" "Arch     :" $SYSINFO_ARCH "Total Overall :" $CURR_PROC
		printf "  %-10s$DCOLOR$BWHITE %s\n" "Hostname :" $SYSINFO_HOST
#		printf "\n"
		CPU_SPECS=$(lscpu | grep "Model name:" | sed -r 's/Model name:\s{1,}//g')
                CPU_THREADS=$(lscpu | grep "CPU(s):" | sed -r 's/CPU(s):\s{1}//g' |  head -n 1 | awk -F':' '{print $2}')
		CPU_CORES=$(lscpu | grep "Core(s) per socket:" | sed -r 's/Core(s) per socket:\s{1}//g' |  head -n 1 | awk -F':' '{print $2}')
		CPU_L2=$(lscpu | grep "L2 cache:" | sed -r 's/L2 cache:\s{1}//g' |  head -n 1 | awk -F':' '{print $1}')
		CPU_L3=$(lscpu | grep "L3 cache:" | sed -r 's/L3 cache:\s{1}//g' |  head -n 1 | awk -F':' '{print $1}')
		printf "$BLUE|#######################[$DCOLOR $UNDL$YELLOW%s$DCOLOR $UNDL$YELLOW%s$DCOLOR $BLUE]##########################| $BWHITE\n" "CPU" "Information"
		printf "  %-14s$DCOLOR$BWHITE %s %s %s %s %s %s %s %s\n" "CPU Info     :" $CPU_SPECS
		printf "  %-14s$DCOLOR$BWHITE %-22s  %-14s %s\n" "CPU Threads  :" $CPU_THREADS "CPU Cores  :" $CPU_CORES
		printf "  %-14s$DCOLOR$BWHITE %s%s\n" "L2 Cache     :" $CPU_L2
		printf "  %-14s$DCOLOR$BWHITE %s%s\n" "L3 Cache     :" $CPU_L3
		printf "$DCOLOR"
#		printf "\n"
		RAM_MOD_MEM=$(dmidecode  -t memory  | grep "Size:" | sed -e 's/Size:\s{1}//g'| awk -F':' '{print $2}')
		readarray -t RAM_MOD_MEMTOTAL < <(echo "$RAM_MOD_MEM")
		RAM_TYPE_MEM=$(dmidecode  -t memory  | grep "Type:" | sed -e 's/Type:\s{1}//g'| awk -F':' '{print $2}' | sed -n '1!p')
                readarray -t RAM_TYPE_MEMTOTAL < <(echo "$RAM_TYPE_MEM")
                printf "$BLUE|#######################[$DCOLOR $UNDL$YELLOW%s$DCOLOR $UNDL$YELLOW%s$DCOLOR $BLUE]##########################| $BWHITE\n" "RAM" "Information"
                if [[ ${RAM_MOD_MEMTOTAL[0]} == "" ]]; then
                        printf "  %-14s$DCOLOR$BWHITE No Slot Available\n" "RAM Slot 1   :"
                else
		if [[ ${RAM_MOD_MEMTOTAL[1]} == ' 491520 MB' ]] && [[ ${RAM_MOD_MEMTOTAL[0]} == ' 32768 MB' ]]; then
                                RAM_MOD_MEMTOTAL[0]="${RAM_MOD_MEMTOTAL[2]}"
                                RAM_MOD_MEMTOTAL[1]="${RAM_MOD_MEMTOTAL[3]}"
                                RAM_MOD_MEMTOTAL[2]=""
                                RAM_MOD_MEMTOTAL[3]=""
                                printf " ${RED}This Machine is most likely a Virtual Machine.${DCOLOR}${BWHITE}\n"
                        fi
			if [[ ${RAM_TYPE_MEMTOTAL[0]} != " DDR" ]]; then
                        	printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 1   :" ${RAM_MOD_MEMTOTAL[0]} ${RAM_TYPE_MEMTOTAL[0]}
			else
				printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 1   :" ${RAM_MOD_MEMTOTAL[0]}
			fi
                fi
                if [[ ${RAM_MOD_MEMTOTAL[1]} == "" ]]; then
                        printf "  %-14s$DCOLOR$BWHITE No Slot Available\n" "RAM Slot 2   :"
                else
                        if [[ ${RAM_TYPE_MEMTOTAL[1]} != " DDR" ]]; then
                                printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 2   :" ${RAM_MOD_MEMTOTAL[1]} ${RAM_TYPE_MEMTOTAL[1]}
                        else
                                printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 2   :" ${RAM_MOD_MEMTOTAL[1]}
                        fi
                fi
                if [[ ${RAM_MOD_MEMTOTAL[2]} == "" ]]; then
                        printf "  %-14s$DCOLOR$BWHITE No Slot Available\n" "RAM Slot 3   :"
                else
                        if [[ ${RAM_TYPE_MEMTOTAL[2]} != " DDR" ]]; then
                                printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 3   :" ${RAM_MOD_MEMTOTAL[2]} ${RAM_TYPE_MEMTOTAL[2]}
                        else
                                printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 3   :" ${RAM_MOD_MEMTOTAL[2]}
                        fi
                fi
                if [[ ${RAM_MOD_MEMTOTAL[3]} == "" ]]; then
                        printf "  %-14s$DCOLOR$BWHITE No Slot Available\n" "RAM Slot 4   :"
                else
                        if [[ ${RAM_TYPE_MEMTOTAL[3]} != " DDR" ]]; then
                                printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 4   :" ${RAM_MOD_MEMTOTAL[3]} ${RAM_TYPE_MEMTOTAL[3]}
                        else
                                printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 4   :" ${RAM_MOD_MEMTOTAL[3]}
                        fi
                fi
                if [[ ${RAM_MOD_MEMTOTAL[4]} != "" ]]; then
			if [[ ${RAM_MOD_MEMTOTAL[4]} == ' Not Installed' ]]; then
				printf ""
			else
                        	if [[ ${RAM_TYPE_MEMTOTAL[4]} != " DDR" ]]; then
                                	printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 5   :" ${RAM_MOD_MEMTOTAL[4]} ${RAM_TYPE_MEMTOTAL[4]}
                        	else
                                	printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 5   :" ${RAM_MOD_MEMTOTAL[4]}
                        	fi
			fi
                fi
                if [[ ${RAM_MOD_MEMTOTAL[5]} != "" ]]; then
			if [[ ${RAM_MOD_MEMTOTAL[5]} == ' Not Installed' ]]; then
				printf ""
			else
                        	if [[ ${RAM_TYPE_MEMTOTAL[5]} != " DDR" ]]; then
                                	printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 6   :" ${RAM_MOD_MEMTOTAL[5]} ${RAM_TYPE_MEMTOTAL[5]}
                        	else
                                	printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 6   :" ${RAM_MOD_MEMTOTAL[5]}
                        	fi
			fi
                fi
		if [[ ${RAM_MOD_MEMTOTAL[6]} != "" ]]; then
			if [[ ${RAM_MOD_MEMTOTAL[6]} == ' Not Installed' ]]; then
				printf ""
			else
                        	if [[ ${RAM_TYPE_MEMTOTAL[6]} != " DDR" ]]; then
                                	printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 7   :" ${RAM_MOD_MEMTOTAL[6]} ${RAM_TYPE_MEMTOTAL[6]}
                        	else
                                	printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 7   :" ${RAM_MOD_MEMTOTAL[6]}
                        	fi
			fi
                fi
		if [[ ${RAM_MOD_MEMTOTAL[7]} != "" ]]; then
			if [[ ${RAM_MOD_MEMTOTAL[7]} == ' Not Installed' ]]; then
				printf ""
			else
                        	if [[ ${RAM_TYPE_MEMTOTAL[7]} != " DDR" ]]; then
                                	printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 8   :" ${RAM_MOD_MEMTOTAL[7]} ${RAM_TYPE_MEMTOTAL[7]}
                        	else
                                	printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 8   :" ${RAM_MOD_MEMTOTAL[7]}
                        	fi
			fi
                fi
		if [[ ${RAM_MOD_MEMTOTAL[8]} != "" ]]; then
			if [[ ${RAM_MOD_MEMTOTAL[8]} == ' Not Installed' ]]; then
				printf ""
			else
                        	if [[ ${RAM_TYPE_MEMTOTAL[8]} != " DDR" ]]; then
                                	printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 9   :" ${RAM_MOD_MEMTOTAL[8]} ${RAM_TYPE_MEMTOTAL[8]}
                        	else
                                	printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 9   :" ${RAM_MOD_MEMTOTAL[8]}
                        	fi
			fi
                fi
		if [[ ${RAM_MOD_MEMTOTAL[9]} != "" ]]; then
			if [[ ${RAM_MOD_MEMTOTAL[9]} == ' Not Installed' ]]; then
				printf ""
			else
                        	if [[ ${RAM_TYPE_MEMTOTAL[9]} != " DDR" ]]; then
                                	printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 10  :" ${RAM_MOD_MEMTOTAL[9]} ${RAM_TYPE_MEMTOTAL[9]}
                        	else
                                	printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 10  :" ${RAM_MOD_MEMTOTAL[9]}
                        	fi
			fi
                fi
		if [[ ${RAM_MOD_MEMTOTAL[10]} != "" ]]; then
			if [[ ${RAM_MOD_MEMTOTAL[10]} == ' Not Installed' ]]; then
				printf ""
			else
                        	if [[ ${RAM_TYPE_MEMTOTAL[10]} != " DDR" ]]; then
                                	printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 11  :" ${RAM_MOD_MEMTOTAL[10]} ${RAM_TYPE_MEMTOTAL[10]}
                        	else
                                	printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 11  :" ${RAM_MOD_MEMTOTAL[10]}
                        	fi
			fi
                fi
		if [[ ${RAM_MOD_MEMTOTAL[11]} != "" ]]; then
			if [[ ${RAM_MOD_MEMTOTAL[11]} == ' Not Installed' ]]; then
				printf ""
			else
                        	if [[ ${RAM_TYPE_MEMTOTAL[11]} != " DDR" ]]; then
                                	printf "  %-14s$DCOLOR$BWHITE %s%s %s %s %s\n" "RAM Slot 12  :" ${RAM_MOD_MEMTOTAL[11]} ${RAM_TYPE_MEMTOTAL[11]}
                        	else
                                	printf "  %-14s$DCOLOR$BWHITE %s %s %s %s\n" "RAM Slot 12  :" ${RAM_MOD_MEMTOTAL[11]}
                        	fi
			fi
                fi
                printf "$DCOLOR"
#		printf "\n"
		printf "$BLUE|#######################[$DCOLOR $UNDL$YELLOW%s$DCOLOR $UNDL$YELLOW%s$DCOLOR $BLUE]#########################| $BWHITE\n" "User" "Information"
		printf "  %-14s$DCOLOR$BWHITE %-20s  %-15s$DCOLOR$BWHITE %s\n" "Username     :" $USER "Home Directory:" $HOME
		SHELL=$(finger $USERNAME | grep "Directory:" | sed -r 's/Directory:\s{1}//g' |  head -n 1 | awk -F':' '{print $2}')
                if [[ $SHELL != "" ]]; then
                        printf "  %-14s$DCOLOR$BWHITE %-21s" "Shell Type   :" $SHELL
                fi
                printf "  %-14s$DCOLOR$BWHITE %s\n" "NET-UP Vers  :" $VERS
		printf "  %-14s$DCOLOR$BWHITE %s\n" "NET-UP GitHub:" $GITHUBREPO
		printf "  %-14s$DCOLOR$BWHITE %s\n" "NET-UP Folder:" $HOMEDIR
		printf "  %-14s$DCOLOR$BWHITE %s\n" "Module GitHub:" $MODULEREPO
		printf "  %-14s$DCOLOR$BWHITE %s\n" "Module Folder:" $MODULEDIR
		if [[ "$SUBNET" != "" ]]; then
			printf "  %-14s$DCOLOR$BWHITE %-20s  %-14s$DCOLOR$BWHITE %-20s\n" "Local Subnet :" $SUBNET "Public IP     :" $PUBLICIP
		fi
                printf "$BLUE|####################################################################| $DCOLOR\n"
	exitnetup;
}

do_enablemod() {
	if [ -z "$1" ]; then
                print_error "No Module input given."
                exit_check # Check for console before exit
        else
		SELECTED=$1
                print_notification "Attempting to Enable Module: $SELECTED."
		if [ -f $MODULEDIR/$SELECTED.tmp ]; then
			print_notification "Checking if Module was Enabled."
			/bin/bash $MODULEDIR/enablemod -f $MODULEDIR/$SELECTED
			if [ -f "$MODULEDIR/$SELECTED.mdu" ]; then
				check_good "Module $SELECTED Enabled!"
			else
				print_error "Module $SELECTED was not Enabled please contact contact@private-locker.com";
			fi
			exitnetup
		else
			print_error "There is No Module named that, Please Try again."
                	exitnetup
		fi
        fi
}

do_disablemod() {
        if [ -z "$1" ]; then
                print_error "No Module input given."
                exit_check # Check for console before exit
        else
		SELECTED=$1
		print_notification "Attempting to Disable Module: $SELECTED"
		if [ -f $MODULEDIR/$SELECTED.mdu ]; then
			print_notification "Checking if Module was Disabled."
			/bin/bash $MODULEDIR/disablemod -f $MODULEDIR/$SELECTED
			if [ -f "$MODULEDIR/$SELECTED.tmp" ]; then
				check_good "Module $SELECTED Disabled!"
			else
				print_error "Module $SELECTED was not Disabled please contact contact@private-locker.com";
			fi
			exitnetup
		else
			print_error "There is No Module named that, Please Try again."
                	exitnetup
		fi
        fi
}

do_disablemods() {
	tempmodcount=0
	for file in `ls $MODULEDIR/*.mdu 2>/dev/null`; do
		basefile=$(basename "$file" .mdu)
		tempmodcount=1
		print_notification "Disabling Module: $basefile."
		mv "$file" "$MODULEDIR/$(basename "$file" .mdu).tmp"
		print_notification "Checking if Module was Disabled."
		if [ ! -f "$MODULEDIR/$file.tmp" ]; then
			check_good "Module $basefile Disabled!"
		else
			print_error "Module $basefile was not Disabled please contact contact@private-locker.com";
		fi
	done
	if [ ! -f "$MODULEDIR/*.mdu" ] && [ "$tempmodcount" -eq "0" ]; then
		print_error "There is no Enabled Modules."
		exitnetup
	fi
	exitnetup
}

do_enablemods() {
	tempmodcount=0
	for file in `ls $MODULEDIR/*.tmp 2>/dev/null`; do
		basefile=$(basename "$file" .tmp)
		tempmodcount=1
		print_notification "Enabling Module: $basefile."
		mv "$file" "$MODULEDIR/$(basename "$file" .tmp).mdu"
		print_notification "Checking if Module was Enabled."
		if [ ! -f "$MODULEDIR/$file.tmp" ]; then
			check_good "Module $basefile Enabled!"
		else
			print_error "Module $basefile was not Enabled please contact contact@private-locker.com";
		fi
		
	done
	if [ ! -f "$MODULEDIR/*.mdu" ] && [ "$tempmodcount" -eq "0" ]; then
		print_error "There is no Disabled Modules."
		exitnetup
	fi
	exitnetup
}

do_console() {
        if [ -z "$NETUP_CONSOLE" ]; then
                print_notification "Initializing console."
                export NETUP_CONSOLE=TRUE
        fi

        declare -a user_input
        read -p "Netup Console> " user_input

        if [ -z "$user_input" ]; then
                do_console
        fi

        do_usage ${user_input[@]}
        do_console
}

do_usage() {
        if [ "${@: -1}" == "-v" ] || [ "${@: -1}" == "--verbose" ];then
                LOGVERBOSE="1"
                        if [[ "$LOGVERBOSE" == "1" ]]; then
                                if [[ ! -d "$NETUPLOGDIR" ]]; then
                                        mkdir -p "$NETUPLOGDIR";
                                fi
				if [[ ! -d "$NETUPLOGDIR/$d" ]]; then
					mkdir -p "$NETUPLOGDIR/$d";
				fi
                        if [[ ! -f "$NETUPLOGFILE" ]]; then
                                touch "$NETUPLOGFILE";
                        fi
                        if [[ ! -f "$MODULELOGFILE" ]]; then
                                touch "$MODULELOGFILE";
                        fi
                fi
        fi
	case "$1" in
		update)
			shift
			do_update $@ ;;
		updatemods)
			shift
			do_updatemods $@ ;;
		run)
			shift
			do_run $@ ;;
		information|info)
			shift
			do_information;;
		console)
			do_console ;;
		enable|enablemod)
			shift
			do_enablemod $@ ;;
		enablemods)
			shift
			do_enablemods $@ ;;
		autostart)
			shift
			do_autostart $@ ;;
		autoreboot)
			shift
			do_autoreboot $@ ;;
		list|listmods)
			list_modules # init.sh
			exitnetup ;;
		disablemods)
			shift
			do_disablemods $@ ;;
		disable|disablemod)
			shift
			do_disablemod $@ ;;
		autoexit)
			shift
			do_autoexit $@ ;;
		interface)
			shift
			do_interface $@ ;;
		help)
			do_help ;;
        exit)
            unset NETUP_CONSOLE
            exitnetup ;;
        *)
			if [ -z "$1" ]
			then
				do_init
			else
				nocommands
			fi
			 ;;
	esac
}

