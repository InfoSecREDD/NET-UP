exitnetup () {
        if [ -z $NETUP_CONSOLE ]; then
                echo -e ""
                check_good "$NETUPCRED1"
                echo -e ""
                exit 0
        fi
}

do_run() {
	SELECTED=$1
        if [ -z "$1" ]; then
                echo -e "No Module input given."
		exit_check # Check for console before exit
        else
                FILE=$1
                runmodcommand
                exitnetup
        fi
}

do_update() {
	if [ "$1" = "-y" ]; then
		fastupdategithub
	elif [ "$1" = "--netup-only" ] || [ "$1" = "-n" ]; then
		if [ "$2" = "-y" ]; then
			fastupdatenetuponly
		fi
		checkvers
		updatenetuponly
	else
		checkvers
		exitnetup
	fi
}

do_autoexit() {
        if [ "$1" = "off" ] ||  [ "$1" = "OFF" ] || [ "$1" = "" ]; then
                if grep -q "$AUTOEXITOFF" "$HOMEDIR/netup"
                        then
			echo -e ""
                        print_notification "Automatic Exit is already disabled."
                else
			echo -e ""
			sed -i "s/$AUTOEXITON/$AUTOEXITOFF/g" "$HOMEDIR/netup"
                        check_good "Changed Automatic Exit of Script to OFF."
                fi
                elif [ "$1" = "on" ] ||  [ "$1" = "ON" ]; then
                        if grep -q "$AUTOEXITON" "$HOMEDIR/netup"
                        then
			echo -e "";
                        print_notification "Automatic Exit is already enabled."
                else
			echo -e ""
			sed -i "s/$AUTOEXITOFF/$AUTOEXITON/g" "$HOMEDIR/netup"
                        check_good "Changed Automatic Exit of Script to ON."
                fi
                else
        exit_check # Check for console before exit
        fi
        exitnetup
}

do_autoreboot() {
        if [ "$1" = "off" ] ||  [ "$1" = "OFF" ] || [ "$1" = "" ]; then
		if grep -q "$AUTOBOOTOFF" "$HOMEDIR/netup"
			then
			echo -e ""
    			print_notification "Automatic Reboot is already disabled."
		else
			echo -e ""
			sed -i "s/$AUTOBOOTON/$AUTOBOOTOFF/g" "$HOMEDIR/netup"
			check_good "Changed Automatic Reboot after Script Completes to OFF."
		fi
                elif [ "$1" = "on" ] ||  [ "$1" = "ON" ]; then
			if grep -q "$AUTOBOOTON" "$HOMEDIR/netup"
                        then
			echo -e ""
			print_notification "Automatic Reboot is already enabled."
		else
			echo -e ""
			sed -i "s/$AUTOBOOTOFF/$AUTOBOOTON/g" "$HOMEDIR/netup"
			check_good "Changed Automatic Reboot after Script Completes to ON."
		fi
                else
        exit_check # Check for console before exit
        fi
        exitnetup
}

do_updatemods() {
	updatemods
	exitnetup
}

do_autostart() {
        if [ "$1" = "off" ] ||  [ "$1" = "OFF" ] || [ "$1" = "" ]; then
		disable_cron
	elif [ "$1" = "on" ] ||  [ "$1" = "ON" ]; then
		install_cron;
	else
		really;
        	exit_check # Check for console before exit
	fi
        exitnetup
}

do_interface() {
	if [ "$1" = "auto" ] || [ "$1" = "" ]; then
		AUTO1=$(ip link | grep "state UP" | awk -F: '$0!~"lo|vir|^[^0-9]"{print $2;getline}')
		AUTODETECT=${AUTO1## }
		echo -e "";
		print_notification "Automatticially detecting active Adapter.";
		print_notification "Setting $INTVAR Variable to $AUTODETECT";
		sed -i "s/$INTVAR=.*/$INTVAR=$AUTODETECT/g" "$HOMEDIR/netup";
		check_good "Done."
		exitnetup;
	fi
}

do_information() {
	print_good "NET-UP Version: $VERS"
	print_good "NET-UP Directory: $HOMEDIR"
	print_good "Modules Directory: $MODULEDIR"
	exitnetup;
}

do_enablemod() {
	if [ -z "$1" ]; then
                print_error "No Module input given."
                exit_check # Check for console before exit
        else
		SELECTED=$1
                print_notification "Attempting to Enable Module: $SELECTED."
		if [ -f $MODULEDIR/$SELECTED.tmp ]; then
			print_notification "Checking if Module was Enabled."
			/bin/bash $MODULEDIR/enablemod -f $MODULEDIR/$SELECTED
			if [ -f "$MODULEDIR/$SELECTED.mdu" ]; then
				check_good "Module $SELECTED Enabled!"
			else
				print_error "Module $SELECTED was not Enabled please contact contact@private-locker.com";
			fi
			exitnetup
		else
			print_error "There is No Module named that, Please Try again."
                	exitnetup
		fi
        fi
}

do_disablemod() {
        if [ -z "$1" ]; then
                print_error "No Module input given."
                exit_check # Check for console before exit
        else
		SELECTED=$1
		print_notification "Attempting to Disable Module: $SELECTED"
		if [ -f $MODULEDIR/$SELECTED.mdu ]; then
			print_notification "Checking if Module was Disabled."
			/bin/bash $MODULEDIR/disablemod -f $MODULEDIR/$SELECTED
			if [ -f "$MODULEDIR/$SELECTED.tmp" ]; then
				check_good "Module $SELECTED Disabled!"
			else
				print_error "Module $SELECTED was not Disabled please contact contact@private-locker.com";
			fi
			exitnetup
		else
			print_error "There is No Module named that, Please Try again."
                	exitnetup
		fi
        fi
}

do_disablemods() {
	tempmodcount=0
	for file in `ls $MODULEDIR/*.mdu 2>/dev/null`; do
		basefile=$(basename "$file" .mdu)
		tempmodcount=1
		print_notification "Disabling Module: $basefile."
		mv "$file" "$MODULEDIR/$(basename "$file" .mdu).tmp"
		print_notification "Checking if Module was Disabled."
		if [ ! -f "$MODULEDIR/$file.tmp" ]; then
			check_good "Module $basefile Disabled!"
		else
			print_error "Module $basefile was not Disabled please contact contact@private-locker.com";
		fi
	done
	if [ ! -f "$MODULEDIR/*.mdu" ] && [ "$tempmodcount" -eq "0" ]; then
		print_error "There is no Enabled Modules."
		exitnetup
	fi
	exitnetup
}

do_enablemods() {
	tempmodcount=0
	for file in `ls $MODULEDIR/*.tmp 2>/dev/null`; do
		basefile=$(basename "$file" .tmp)
		tempmodcount=1
		print_notification "Enabling Module: $basefile."
		mv "$file" "$MODULEDIR/$(basename "$file" .tmp).mdu"
		print_notification "Checking if Module was Enabled."
		if [ ! -f "$MODULEDIR/$file.tmp" ]; then
			check_good "Module $basefile Enabled!"
		else
			print_error "Module $basefile was not Enabled please contact contact@private-locker.com";
		fi
		
	done
	if [ ! -f "$MODULEDIR/*.mdu" ] && [ "$tempmodcount" -eq "0" ]; then
		print_error "There is no Disabled Modules."
		exitnetup
	fi
	exitnetup
}

do_console() {
        if [ -z "$NETUP_CONSOLE" ]; then
                print_notification "Initializing console."
                export NETUP_CONSOLE=TRUE
        fi

        declare -a user_input
        read -p "Netup Console> " user_input

        if [ -z "$user_input" ]; then
                do_console
        fi

        do_usage ${user_input[@]}
        do_console
}

do_usage() {
        if [ "${@: -1}" == "-v" ] || [ "${@: -1}" == "--verbose" ];then
                LOGVERBOSE="1"
                        if [[ "$LOGVERBOSE" == "1" ]]; then
                                if [[ ! -d "$NETUPLOGDIR" ]]; then
                                        mkdir -p "$NETUPLOGDIR";
                                fi
				if [[ ! -d "$NETUPLOGDIR/$d" ]]; then
					mkdir -p "$NETUPLOGDIR/$d";
				fi
                        if [[ ! -f "$NETUPLOGFILE" ]]; then
                                touch "$NETUPLOGFILE";
                        fi
                        if [[ ! -f "$MODULELOGFILE" ]]; then
                                touch "$MODULELOGFILE";
                        fi
                fi
        fi
	case "$1" in
		update)
			shift
			do_update $@ ;;
		updatemods)
			shift
			do_updatemods $@ ;;
		run)
			shift
			do_run $@ ;;
		information|info)
			shift
			do_information;;
		console)
			do_console ;;
		enable|enablemod)
			shift
			do_enablemod $@ ;;
		enablemods)
			shift
			do_enablemods $@ ;;
		autostart)
			shift
			do_autostart $@ ;;
		autoreboot)
			shift
			do_autoreboot $@ ;;
		list|listmods)
			list_modules # init.sh
			exitnetup ;;
		disablemods)
			shift
			do_disablemods $@ ;;
		disable|disablemod)
			shift
			do_disablemod $@ ;;
		autoexit)
			shift
			do_autoexit $@ ;;
		interface)
			shift
			do_interface $@ ;;
		help)
			do_help ;;
        exit)
            unset NETUP_CONSOLE
            exitnetup ;;
        *)
			if [ -z "$1" ]
			then
				do_init
			else
				nocommands
			fi
			 ;;
	esac
}

