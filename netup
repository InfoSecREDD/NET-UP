#!/bin/bash
#
## Internal Required Variables. (DO NOT CHANGE!)
if [[ $1 = "help" ]]; then
        echo -e ""
        echo -e "Syntax: ./netup"
        echo -e "        ./netup [option] [module]/[on/off]"
        echo -e ""
        echo -e "Examples:"
        echo -e "    ./netup help                    - This help screen displayed."
	echo -e "    ./netup update                  - Updates entire NET-UP & Modules with Public Repo."
	echo -e "    ./netup interface               - Automattically sets INTERFACE Variable."
        echo -e "    ./netup enablemods              - Enables all Modules in the Modules Folder."
        echo -e "    ./netup disablemods             - Disables all Modules in the Modules Folder."
        echo -e "    ./netup updatemods              - Sync's all Modules with Public Repo."
	echo -e "    ./netup autostart [on/off]      - Turns on/off crontab for NET-UP.";
	echo -e "    ./netup autoreboot [on/off]     - Turns on/off AUTOREBOOT for NET-UP.";
	echo -e "    ./netup autoexit [on/off]       - Turns on/off AUTOEXIT for NET-UP.";
        echo -e "    ./netup list                    - Shows all enabled/disabled modules."
        echo -e "    ./netup run subscan             - Runs specific module/script using NET-UP."
        echo -e "    ./netup enable subscan          - Enables Subscan module for NET-UP."
        echo -e "    ./netup disable subscan         - Disables Backdoor module for NET-UP."
        echo -e ""
        exit 0
fi
nocommands() {
        echo -e "There is no command for NET-UP like that."
        echo -e ""
        echo -e "Please type './netup help' to see syntax examples of this command."
        echo -e ""
        exit 0
}
if [[ $1 != "" && $1 != "update" && $1 != "enable" && $1 != "enablemods" && $1 != "autostart" && $1 != "list" && $1 != "listmods" && $1 != "interface" && $1 != "disable" && $1 != "autoreboot" && $1 != "disablemods" && $1 != "run" && $1 != "updatemods" && $1 != "autoexit" ]]; then
        nocommands;
fi
get_dir () {
     SOURCE="${BASH_SOURCE[0]}"
     while [ -h "$SOURCE" ]; do
          DIRECTORY="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          SOURCE="$( readlink "$SOURCE" )"
          [[ $SOURCE != /* ]] && SOURCE="$DIRECTORY/$SOURCE"
     done
     DIRECTORY="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
     echo "$DIRECTORY"
}
DIR=$(get_dir)
source $DIR/src/initialize
sym_check;

exitnetup () {
        echo -e ""
        check_good "$NETUPCRED1";
        check_good "$NETUPCRED2";
        echo -e ""
        exit 0
}

SELECTED=$2
if [[ $1 = "run" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                FILE=$2
                runmodcommand;
                exitnetup;
        fi
elif [[ $1 = "update" ]]; then
		if [ "$2" = "-y" ]; then
			fastupdategithub;
		else
        updategithub;
        exitnetup;
		fi
elif [[ $1 = "autoexit" ]]; then
        if [ "$2" = "off" ] ||  [ "$2" = "OFF" ] || [ "$2" = "" ]; then
                if grep -q "$AUTOEXITOFF" "$HOME/netup/netup";
                        then
			echo -e "";
                        print_notification "Automatic Exit is already disabled.";
                else
			echo -e "";
                        replace "$AUTOEXITON" "$AUTOEXITOFF" -- $HOME/netup/netup >/dev/null;
                        check_good "Changed Automatic Exit of Script to OFF.";
                fi
                elif [ "$2" = "on" ] ||  [ "$2" = "ON" ]; then
                        if grep -q "$AUTOEXITON" "$HOME/netup/netup";
                        then
			echo -e "";
                        print_notification "Automatic Exit is already enabled.";
                else
			echo -e "";
                        replace "$AUTOEXITOFF" "$AUTOEXITON" -- $HOME/netup/netup >/dev/null;
                        check_good "Changed Automatic Exit of Script to ON.";
                fi
                else
        exit 0
        fi
        exitnetup;
elif [[ $1 = "autoreboot" ]]; then
        if [ "$2" = "off" ] ||  [ "$2" = "OFF" ] || [ "$2" = "" ]; then
		if grep -q "$AUTOBOOTOFF" "$HOME/netup/netup";
			then
			echo -e "";
    			print_notification "Automatic Reboot is already disabled.";
		else
			echo -e "";
                        replace "$AUTOBOOTON" "$AUTOBOOTOFF" -- $HOME/netup/netup >/dev/null;
			check_good "Changed Automatic Reboot after Script Completes to OFF.";
		fi
                elif [ "$2" = "on" ] ||  [ "$2" = "ON" ]; then
			if grep -q "$AUTOBOOTON" "$HOME/netup/netup";
                        then
			echo -e "";
			print_notification "Automatic Reboot is already enabled.";
		else
			echo -e "";
                        replace "$AUTOBOOTOFF" "$AUTOBOOTON" -- $HOME/netup/netup >/dev/null;
			check_good "Changed Automatic Reboot after Script Completes to ON.";
		fi
                else
        exit 0
        fi
        exitnetup;
elif [[ $1 = "updatemods" ]]; then
        updatemods;
        exitnetup;
elif [[ $1 = "autostart" ]]; then
        if [ "$2" = "off" ] ||  [ "$2" = "OFF" ] || [ "$2" = "" ]; then
			disable_cron;
		elif [ "$2" = "on" ] ||  [ "$2" = "ON" ]; then
			install_cron;
		else
			really;
        exit 0
	fi
        exitnetup;
elif [[ $1 = "listmods" ]]; then
        list_modules;
        exitnetup;
elif [[ $1 = "list" ]]; then
        list_modules;
        exitnetup;

elif [[ $1 = "enablemod" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to enable $SELECTED"
				if [ -f $DIR/modules/$SELECTED.tmp ]; then
					/bin/bash $DIR/modules/enablemod -f $DIR/modules/$SELECTED
				else
					echo "There is No Module named that, Please Try again."
                exitnetup;
				fi
        fi
elif [[ $1 = "interface" ]]; then
	if [ "$2" = "auto" ] || [ "$2" = "" ]; then
		AUTO1=$(ip link | grep "state UP" | awk -F: '$0!~"lo|vir|^[^0-9]"{print $2;getline}')
		AUTODETECT=${AUTO1## }
		echo -e "";
		print_notification "Automatticially detecting active Adapter.";
		print_notification "Setting $INTVAR Variable to $AUTODETECT";
		sed -i "s/$INTVAR=.*/$INTVAR=$AUTODETECT/g" "$HOME/netup/netup";
		check_good "Done."
	exitnetup;
	fi
elif [[ $1 = "enable" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to enable $SELECTED"
				if [ -f $DIR/modules/$SELECTED.tmp ]; then
					/bin/bash $DIR/modules/enablemod -f $DIR/modules/$SELECTED
				else
					echo "There is No Module named that, Please Try again."
                exitnetup;
				fi
        fi
elif [[ $1 = "disablemod" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to disable $SELECTED"
				if [ -f $DIR/modules/$SELECTED.mdu ]; then
					/bin/bash $DIR/modules/disablemod -f $DIR/modules/$SELECTED
				else
					echo "There is No Module named that, Please Try again."
                exitnetup;
				fi
        fi
elif [[ $1 = "disable" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to disable $SELECTED"
				if [ -f $DIR/modules/$SELECTED.mdu ]; then
					/bin/bash $DIR/modules/disablemod -f $DIR/modules/$SELECTED
				else
					echo "There is No Module named that, Please Try again."
                exitnetup;
				fi
        fi
fi

#############################################################
## User Adjustable Variables. - For More info please read  ##
##   the README.txt in the modules folder.                 ##
#############################################################

INTERFACE=eth0
AUTOREBOOT=NO
AUTOEXIT=YES

# Future Debugging Variables
#DEBUG=1
#LOGFILE=~/logs/netup.log

# Future Debuggin Logfiles..
#function debug() {
#       printf 'DEBUG: '
#}

# AutoExit Check.
autoexitcheck;
# Check OS type.
os_check;
# Check if anything needs installed.
print_status "Checking for dependencies..";
check_dep;
check_good "Done!";
# Start NET-UP
print_notification "Starting Net-UP Core..";
run_netup;
check_good "Net-UP Core has finished..";
exitnetup;
