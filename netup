#!/bin/bash
#
## Internal Required Variables. (DO NOT CHANGE!)
do_help() {
        echo -e ""
        echo -e "Syntax: ./netup"
        echo -e "        ./netup [option] [module]/[on/off]"
        echo -e ""
        echo -e "Examples:"
        echo -e "    ./netup help                    - This help screen displayed."
	echo -e "    ./netup update                  - Updates entire NET-UP & Modules with Public Repo."
	echo -e "    ./netup interface               - Automattically sets INTERFACE Variable."
        echo -e "    ./netup enablemods              - Enables all Modules in the Modules Folder."
        echo -e "    ./netup disablemods             - Disables all Modules in the Modules Folder."
        echo -e "    ./netup updatemods              - Sync's all Modules with Public Repo."
	echo -e "    ./netup autostart [on/off]      - Turns on/off crontab for NET-UP.";
	echo -e "    ./netup autoreboot [on/off]     - Turns on/off AUTOREBOOT for NET-UP.";
	echo -e "    ./netup autoexit [on/off]       - Turns on/off AUTOEXIT for NET-UP.";
        echo -e "    ./netup list                    - Shows all enabled/disabled modules."
        echo -e "    ./netup run subscan             - Runs specific module/script using NET-UP."
        echo -e "    ./netup enable subscan          - Enables Subscan module for NET-UP."
        echo -e "    ./netup disable subscan         - Disables Backdoor module for NET-UP."
        echo -e ""
        exit 0
}

nocommands() {
        echo -e "There is no command for NET-UP like that."
        echo -e ""
        echo -e "Please type './netup help' to see syntax examples of this command."
        echo -e ""
        exit 0
}

get_dir () {
     SOURCE="${BASH_SOURCE[0]}"
     while [ -h "$SOURCE" ]; do
          DIRECTORY="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          SOURCE="$( readlink "$SOURCE" )"
          [[ $SOURCE != /* ]] && SOURCE="$DIRECTORY/$SOURCE"
     done
     	DIRECTORY="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
     		echo "$DIRECTORY"
}

exitnetup () {
        echo -e ""
        check_good "$NETUPCRED1"
        check_good "$NETUPCRED2"
        echo -e ""
        exit 0
}

do_run() {
	SELECTED=$1
        if [ -z "$1" ]; then
                echo -e "No Module input given."
                exit 0
        else
                FILE=$1
                runmodcommand
                exitnetup
        fi
}

do_update() {
	if [ "$1" = "-y" ]; then
		fastupdategithub
	else
		updategithub
		exitnetup
	fi
}

do_autoexit() {
        if [ "$1" = "off" ] ||  [ "$1" = "OFF" ] || [ "$1" = "" ]; then
                if grep -q "$AUTOEXITOFF" "$HOME/netup/netup"
                        then
			echo -e ""
                        print_notification "Automatic Exit is already disabled."
                else
			echo -e ""
			sed -i "s/$AUTOEXITON/$AUTOEXITOFF/g" "$HOME/netup/netup"
                        check_good "Changed Automatic Exit of Script to OFF."
                fi
                elif [ "$1" = "on" ] ||  [ "$1" = "ON" ]; then
                        if grep -q "$AUTOEXITON" "$HOME/netup/netup"
                        then
			echo -e "";
                        print_notification "Automatic Exit is already enabled."
                else
			echo -e ""
			sed -i "s/$AUTOEXITOFF/$AUTOEXITON/g" "$HOME/netup/netup"
                        check_good "Changed Automatic Exit of Script to ON."
                fi
                else
        exit 0
        fi
        exitnetup
}

do_autoreboot() {
        if [ "$1" = "off" ] ||  [ "$1" = "OFF" ] || [ "$1" = "" ]; then
		if grep -q "$AUTOBOOTOFF" "$HOME/netup/netup"
			then
			echo -e ""
    			print_notification "Automatic Reboot is already disabled."
		else
			echo -e ""
			sed -i "s/$AUTOBOOTON/$AUTOBOOTOFF/g" "$HOME/netup/netup"
			check_good "Changed Automatic Reboot after Script Completes to OFF."
		fi
                elif [ "$1" = "on" ] ||  [ "$1" = "ON" ]; then
			if grep -q "$AUTOBOOTON" "$HOME/netup/netup"
                        then
			echo -e ""
			print_notification "Automatic Reboot is already enabled."
		else
			echo -e ""
			sed -i "s/$AUTOBOOTOFF/$AUTOBOOTON/g" "$HOME/netup/netup"
			check_good "Changed Automatic Reboot after Script Completes to ON."
		fi
                else
        exit 0
        fi
        exitnetup
}

do_updatemods() {
	updatemods
	exitnetup
}

do_autostart() {
        if [ "$1" = "off" ] ||  [ "$1" = "OFF" ] || [ "$1" = "" ]; then
		disable_cron
	elif [ "$1" = "on" ] ||  [ "$1" = "ON" ]; then
		install_cron;
	else
		really;
        	exit 0
	fi
        exitnetup
}

do_enablemod() {
        if [ -z "$1" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to enable $SELECTED"
				if [ -f $DIR/modules/$SELECTED.tmp ]; then
					/bin/bash $DIR/modules/enablemod -f $DIR/modules/$SELECTED
				else
					echo "There is No Module named that, Please Try again."
                			exitnetup;
				fi
        fi
}

do_interface() {
	if [ "$1" = "auto" ] || [ "$1" = "" ]; then
		AUTO1=$(ip link | grep "state UP" | awk -F: '$0!~"lo|vir|^[^0-9]"{print $2;getline}')
		AUTODETECT=${AUTO1## }
		echo -e "";
		print_notification "Automatticially detecting active Adapter.";
		print_notification "Setting $INTVAR Variable to $AUTODETECT";
		sed -i "s/$INTVAR=.*/$INTVAR=$AUTODETECT/g" "$HOME/netup/netup";
		check_good "Done."
		exitnetup;
	fi
}

do_enable() {
        if [ -z "$1" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to enable $SELECTED"
				if [ -f $DIR/modules/$SELECTED.tmp ]; then
					/bin/bash $DIR/modules/enablemod -f $DIR/modules/$SELECTED
				else
					echo "There is No Module named that, Please Try again."
                			exitnetup;
				fi
        fi
}

do_disablemod() {
        if [ -z "$1" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to disable $SELECTED"
				if [ -f $DIR/modules/$SELECTED.mdu ]; then
					/bin/bash $DIR/modules/disablemod -f $DIR/modules/$SELECTED
				else
					echo "There is No Module named that, Please Try again."
                			exitnetup
				fi
        fi
}

do_usage() {
	case "$1" in
		update)
			do_update $2 ;;
		run)
			do_run $2 ;;
		enable|enablemods)
			do_enablemod $2 ;;
		autostart)
			do_autostart $2 ;;
		list|listmods)
			list_modules # init.sh
			exitnetup ;;
		disable|disablemods)
			do_disablemod $2 ;;
		autoexit)
			do_autoexit $2 ;;
		interface)
			do_interface $2 ;;
		help)
			do_help ;;
		*)
			nocommands
			 ;;
	esac
}


do_init() {
	# Set current directory
	DIR=$(get_dir)

	# Initialize net-up
	source $DIR/src/initialize

	# Check for or create symlink to system wide script
	sym_check

	# Check usage syntax
	do_usage $@

	# AutoExit Check.
	autoexitcheck

	# Check if anything needs installed.
	print_status "Checking for dependencies.."
	check_dep
	check_good "Done!"

	# Start NET-UP
	print_notification "Starting Net-UP Core.."
	run_netup
	check_good 
}


#############################################################
## User Adjustable Variables. - For More info please read  ##
##   the README.txt in the modules folder.                 ##
#############################################################

INTERFACE=eth0
AUTOREBOOT=NO
AUTOEXIT=YES

# Future Debugging Variables
#DEBUG=1
#LOGFILE=~/logs/netup.log

# Future Debuggin Logfiles..
#function debug() {
#       printf 'DEBUG: '
#}

do_init $@
