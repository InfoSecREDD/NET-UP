#!/bin/bash
#
## Internal Required Variables. (DO NOT CHANGE!)
if [[ $1 = "help" ]]; then
        echo -e ""
        echo -e "Syntax: ./netup"
        echo -e "        ./netup [enable/disable/list/run/update/updatemods] [module]"
        echo -e ""
        echo -e "Examples:"
        echo -e "    ./netup help                    - This help screen displayed."
		echo -e "    ./netup update                  - Updates entire NET-UP & Modules with Public Repo."
        echo -e "    ./netup updatemods              - Sync's all Modules with Public Repo."
        echo -e "    ./netup list                    - Shows all enabled/disabled modules."
        echo -e "    ./netup run subscan             - Runs specific module/script using NET-UP."
        echo -e "    ./netup enable subscan          - Enables Subscan module for NET-UP."
        echo -e "    ./netup disable subscan         - Disables Backdoor module for NET-UP."
        echo -e ""
        exit 0
fi
nocommands() {
        echo -e "There is no command for NET-UP like that."
        echo -e ""
        echo -e "Please type './netup help' to see syntax examples of this command."
        echo -e ""
        exit 0
}
if [[ $1 != "" && $1 != "update" && $1 != "enable" && $1 != "enablemods" && $1 != "list" && $1 != "listmods" && $1 != "disable" && $1 != "disablemods" && $1 != "run" && $1 != "updatemods" ]]; then
        nocommands;
fi
get_dir () {
     SOURCE="${BASH_SOURCE[0]}"
     while [ -h "$SOURCE" ]; do
          DIRECTORY="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
          SOURCE="$( readlink "$SOURCE" )"
          [[ $SOURCE != /* ]] && SOURCE="$DIRECTORY/$SOURCE"
     done
     DIRECTORY="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
     echo "$DIRECTORY"
}
DIR=$(get_dir)
source $DIR/src/initialize
sym_check;

exitnetup () {
        echo -e ""
        echo -e "[X] $NETUPCRED1";
        echo -e "[X] $NETUPCRED2";
        echo -e ""
        exit 0
}

SELECTED=$2
if [[ $1 = "run" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                FILE=$2
                runmodcommand;
                exitnetup;
        fi
elif [[ $1 = "update" ]]; then
		if [ "$2" = "-y" ]; then
			fastupdategithub;
		else
        updategithub;
        exitnetup;
		fi
elif [[ $1 = "updatemods" ]]; then
        updatemods;
        exitnetup;
elif [[ $1 = "listmods" ]]; then
        list_modules;
        exitnetup;
elif [[ $1 = "list" ]]; then
        list_modules;
        exitnetup;

elif [[ $1 = "enablemod" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to enable $SELECTED"
                /bin/bash $DIR/modules/enablemod -f modules/$SELECTED
                exitnetup;
        fi
elif [[ $1 = "enable" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to enable $SELECTED"
                /bin/bash $DIR/modules/enablemod -f modules/$SELECTED
                exitnetup;
        fi
elif [[ $1 = "disablemod" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to disable $SELECTED"
                /bin/bash $DIR/modules/disablemod -f modules/$SELECTED
                exitnetup;
        fi
elif [[ $1 = "disable" ]]; then
        if [ -z "$2" ]; then
                echo -e "No Module input given."
                exit 0
        else
                echo -e "Attempting to disable $SELECTED"
                /bin/bash $DIR/modules/disablemod -f modules/$SELECTED
                exitnetup;
        fi
fi


#############################################################
## User Adjustable Variables. - For More info please read  ##
##   the README.txt in the modules folder.                 ##
#############################################################

INTERFACE=eth0
AUTOREBOOT=NO
AUTOEXIT=YES

# Future Debugging Variables
#DEBUG=1
#LOGFILE=~/logs/netup.log

# Future Debuggin Logfiles..
#function debug() {
#       printf 'DEBUG: '
#}

# AutoExit Check.
autoexitcheck;
# Check OS type.
os_check;
# Check if anything needs installed.
print_status "Checking for dependencies..";
check_dep;
check_good "Done!";
# Start NET-UP
print_notification "Starting Net-UP Core..";
run_netup;
check_good "Net-UP Core has finished..";
exitnetup;